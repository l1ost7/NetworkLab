//Server Code (Receiver

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

int expected_seq = 1;  // Expected sequence number

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[BUFFER_SIZE] = {0};

    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    bind(server_fd, (struct sockaddr *)&address, sizeof(address));
    listen(server_fd, 3);
    printf("Server waiting for connection...\n");

    new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen);
    printf("Client connected.\n");

    while (1) {
        memset(buffer, 0, BUFFER_SIZE);
        int valread = read(new_socket, buffer, BUFFER_SIZE);
        if (valread == 0) break;  // Client disconnected

        int received_seq = atoi(buffer);
        printf("Received packet %d\n", received_seq);

        if (received_seq == expected_seq) {
            printf("ACK sent for packet %d\n\n", received_seq);
            expected_seq++;
        } else {
            printf("Out-of-order packet received. ACK sent for last received in-order packet %d\n\n", expected_seq - 1);
        }

        // Send ACK for the last correctly received packet
        memset(buffer, 0, BUFFER_SIZE);
        sprintf(buffer, "%d", expected_seq - 1);
        send(new_socket, buffer, strlen(buffer) + 1, 0);
    }

    close(new_socket);
    close(server_fd);
    return 0;
}



//Client Code (Sender - Go-Back-N ARQ)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/time.h>

#define PORT 8080
#define BUFFER_SIZE 1024
#define TIMEOUT 3
#define WINDOW_SIZE 4
#define TOTAL_PACKETS 10

int main() {
    int sock = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in serv_addr;
    char buffer[BUFFER_SIZE] = {0};
    struct timeval tv;

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);
    inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr);
    connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr));
    printf("Connected to server.\n");

    tv.tv_sec = TIMEOUT;
    tv.tv_usec = 0;
    setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (const char*)&tv, sizeof(tv));

    int base = 1, next_to_send = 1, ack, packets_acked = 0;

    while (packets_acked < TOTAL_PACKETS) {
        // Send packets within window
        while (next_to_send < base + WINDOW_SIZE && next_to_send <= TOTAL_PACKETS) {
            memset(buffer, 0, BUFFER_SIZE);
            printf("Sending packet %d\n", next_to_send);
            sprintf(buffer, "%d", next_to_send);
            send(sock, buffer, strlen(buffer) + 1, 0);
            next_to_send++;
        }

        // Wait for ACK
        memset(buffer, 0, BUFFER_SIZE);
        int valread = read(sock, buffer, BUFFER_SIZE);

        if (valread > 0) {
            ack = atoi(buffer);
            printf("ACK received for packet %d\n", ack);
            
            // Slide the window if the ACK matches the base
            if (ack >= base) {
                base = ack + 1;
                packets_acked = ack;
            }
        } else {
            // Timeout, retransmit from base
            printf("Timeout! Retransmitting from packet %d...\n", base);
            next_to_send = base;
        }
    }

    printf("All packets sent successfully.\n");
    close(sock);
    return 0;
}
