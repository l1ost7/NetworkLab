sever;
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <ctype.h>

int main() {
    int sockfd, newsock;
    struct sockaddr_in server, client;
    socklen_t len = sizeof(client);
    char buffer[1024], response[100];
    int digitCount = 0, charCount = 0;

    // Create socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    // Configure server
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(8080);

    // Bind and listen
    bind(sockfd, (struct sockaddr *)&server, sizeof(server));
    listen(sockfd, 5);
    printf("Server waiting for connection...\n");

    // Accept client connection
    newsock = accept(sockfd, (struct sockaddr *)&client, &len);
    read(newsock, buffer, sizeof(buffer));
    printf("Received string: %s\n", buffer);

    // Count digits and characters (excluding spaces)
    for (int i = 0; buffer[i] != '\0'; i++) {
        if (isdigit(buffer[i])) {
            digitCount++;
        } else if (isalpha(buffer[i])) {
            charCount++;
        }
    }

    // Prepare response
    sprintf(response, "Characters: %d, Digits: %d", charCount, digitCount);

    // Send result to client
    send(newsock, response, strlen(response), 0);

    // Close sockets
    close(newsock);
    close(sockfd);

    return 0;
}



client;
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>

int main() {
    int sockfd;
    struct sockaddr_in server;
    char buffer[1024], response[100];

    // Create socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    // Configure server
    server.sin_family = AF_INET;
    server.sin_port = htons(8080);
    server.sin_addr.s_addr = inet_addr("127.0.0.1");

    // Connect to server
    connect(sockfd, (struct sockaddr *)&server, sizeof(server));

    // Get input from user
    printf("Enter a string: ");
    fgets(buffer, sizeof(buffer), stdin);
    buffer[strcspn(buffer, "\n")] = '\0';  // remove newline

    // Send string to server
    send(sockfd, buffer, strlen(buffer), 0);

    // Receive response
    read(sockfd, response, sizeof(response));
    printf("Server response: %s\n", response);

    // Close socket
    close(sockfd);

    return 0;
}
